start = rule / multistatement / claim

rule = statement:statement if rule_list:statement+ [.\n]* { return { type: "rule", head: statement, body: rule_list } }
claim = statement:statement [.\n]* {return {type: "claim", statement: statement } }
multistatement = statement:statement statements:statement+ [.\n]* { return { type: "multistatement", statements:[statement].concat(statements) } }

statement = not_statement / meta_statement / simple_statement
not_statement = spaces "not:" statement:simple_statement {
    statement.negated = true;
    return statement;
}
meta_statement = command:word ":" statement:simple_statement {
    statement.tokens.unshift({
        type: "const",
        name: statement.words
    });
    statement.tokens.unshift({
        type: "const",
        name: command
    });
    statement.words = "meta";
    return statement;
}

simple_statement = s:token_statement {
    s.words = s.words.join(" ").trim()
    return s
}
token_statement = word_statement / variable_statement / constant_statement
inner_statement = word_statement / variable_statement / constant_statement / end_statement

end_statement = [\n,]? { return {words: [], tokens: [] } }
word_statement = word:word statement:inner_statement { 
    statement.words.unshift(word)
    return statement
}
variable_statement = variable:variable spaces statement:inner_statement { 
    statement.tokens.unshift({
        type: "variable",
        name: variable
    })
    statement.words.unshift("%")
    return statement
}
constant_statement = constant:constant spaces statement:inner_statement {
    statement.tokens.unshift({
        type: "const",
        name: constant
    })
    statement.words.unshift("%")
    return statement
}
spaces = " "*
if = spaces "if" spaces
word = spaces !if s:[a-zA-Z0-9!_?=]+ { return s.join("").trim() }
variable = spaces '(' contents:[^()]* ')' { return contents.join("").trim() }
constant = constant_dq / constant_sq
constant_dq = spaces '"' contents:[^"]* '"' { return contents.join("").trim() }
constant_sq = spaces "'" contents:[^']* "'" { return contents.join("").trim() }
